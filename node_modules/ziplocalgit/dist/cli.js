"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const commander_1 = require("commander");
const fs = __importStar(require("fs/promises"));
const bestzip_1 = require("bestzip");
const path_1 = __importDefault(require("path"));
const REPO = ".git";
const program = new commander_1.Command();
program.name('ziplocalgit')
    .description('Zip local git in order to create a student submission.')
    .version('1.0.0');
program.command('zip')
    .description('Create a zip file with local git (.git)')
    .option('--noCommitCheck', 'Do not check that all files are committed', false)
    .option('--noOverwrite', 'Do not overwrite existing submission zip', false)
    .option('-f --filename <filename>', 'Name of zip file, use ${CWD} for (simple) name of current folder.', 'abgabe_${CWD}.zip')
    .option('--minsize <minsize>', 'Emit warning if zip file size is less than min size (in kByte).', '20')
    .option('--maxsize <maxsize>', 'Emit warning if zip file size is greater than min size (in kByte).', '2000')
    .action(cmdZip);
program.parse();
//////////////////////////////////////////////
function cmdZip(options) {
    return __awaiter(this, void 0, void 0, function* () {
        // const zip = require('bestzip').nodeZip;
        const filename = generateFileName(options.filename);
        const minsize = parseInt(options.minsize);
        const maxsize = parseInt(options.maxsize);
        if (!(yield folderExists(REPO))) {
            program.error('Es wurde kein Git-Repository gefunden. Hast Du die Vorlage geklont?');
        }
        if (!options.noCommitCheck) {
            try {
                const out = yield execShellExec("git status -su");
                if (out.length > 0) {
                    program.error(`Du hast noch nicht alle Änderungen eingespielt:\n${out}\nSpiele diese Änderungen über\n  git add.\n  git commit -m "Nachricht"\nein.`);
                }
            }
            catch (err) {
                program.error(`Das Git - Kommandozeilentool "git" konnte nicht ausgeführt werden: \n${err} \nBitte installiere gegebenenfalls das Tool für Dein Betriebssystem.`);
            }
        }
        if (yield fileExists(filename)) {
            if (options.noOverwrite) {
                program.error(`Die Datei ${filename} existiert bereits. Bitte lösche diese manuell um eine neue zu erstellen.`);
            }
            try {
                yield fs.rm(filename);
                log(`Alte Version der Datei ${filename} wird überschrieben.`);
            }
            catch (err) {
                program.error(`Die Datei existierende Datei ${filename} konnte nicht gelöscht(bzw.überschrieben) werden, bitte manuell überprüfen.`);
            }
        }
        try {
            yield (0, bestzip_1.nodeZip)({ source: REPO, destination: filename });
            try {
                const stats = yield fs.stat(filename);
                const size = Math.round(stats.size / 1000);
                log(`Die Abgabedatei "${filename}"(${size} KB) wurde erfolgreich erstellt.`);
                if (size > maxsize) {
                    log(`Achtung: Die Abgabedatei "${filename}" erscheint ungewöhnlich groß.\nFalls Du die Datei aufgrund der Größe nicht bei Moodle abgeben kannst, \nwende Dich per E - Mail an den Betreuer.\nSchicke aber auf keinen Fall die Datei per E - Mail!`);
                }
                else {
                    console.log(`Gebe diese Datei über Moodle ab.`);
                    if (size < minsize) {
                        console.log(`Achtung: Die Abgabedatei "${filename}" erscheint ungewöhnlich klein.`);
                    }
                }
            }
            catch (err) {
                program.error(`Die Abgabedatei "${filename}" konnte nicht erstellt werden: ${err}.`);
            }
        }
        catch (err) {
            program.error(`Die Abgabedatei "${filename}" konnte nicht erstellt werden: \n${err} `);
        }
    });
}
function folderExists(name) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!name) {
            throw Error("Cannot check folder existence, no name provided.");
        }
        try {
            const stat = yield fs.stat(name);
            return stat.isDirectory();
        }
        catch (err) {
            return false;
        }
    });
}
function fileExists(name) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!name) {
            throw Error("Cannot check file existence, no name provided.");
        }
        try {
            const stat = yield fs.stat(name);
            return true;
        }
        catch (err) {
            return false;
        }
    });
}
function log(msg) {
    console.log(msg);
}
function execShellExec(cmd) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            (0, child_process_1.exec)(cmd, (error, stdout, stderr) => {
                if (error) {
                    reject(error);
                }
                resolve(stdout ? stdout : stderr);
            });
        });
    });
}
function generateFileName(template) {
    let file = template;
    let cwd = path_1.default.basename(process.cwd());
    let regexp = new RegExp("\\$\\{CWD\\}", 'g');
    file = file.replace(regexp, cwd);
    if (file.indexOf('.') < 0) {
        file += ".zip";
    }
    return file;
}
//# sourceMappingURL=cli.js.map