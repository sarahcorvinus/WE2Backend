import supertest from "supertest";
import { JSONCookie } from "cookie-parser";
import setCookie from "set-cookie-parser";
import { IncomingMessage } from "http";

export type Cookie = setCookie.Cookie;

/**
 * Simplifies access to cookies in SuperTest responses.
 * The cookies are parsed and added to the response object in a new property `cookies`. 
 * This is a  similar to the express middleware cookieParser.
 
* Example (accessing a cookie called `access_token`):
 * ```
 * const testee = supertest(app);
 * const response = parseCookies(await testee.post(`/login`).send({ email: "john@some-host.de", password: "1234" }));
 * const jwtString = response.cookies.access_token;
 * ...
 * ```
 * 
 * @param response response returned from SuperTest
 * @returns the same response with two new properties:
 *      - `cookies`: this property contains the values of cookies as properties,
*           the name of the cookie is the name of the property (similar to the express middleware cookieParser),
            e.g. `res.cookies.access_token` contains the value of the cookie `access_token`
        - `cookiesRaw`: the full cookies (as returned by set-cookies), i.e. including all properties (such as `httpOnly`, `secure`, etc.),
            this is an array of cookies.
 */
export function parseCookies(response: supertest.Response): supertest.Response & { cookies: { [key: string]: object | string }, cookiesRaw: Cookie[]  } {
    const cookiesRaw = setCookie.parse((response as unknown as { res: IncomingMessage }).res);
    const cookies: { [key: string]: object | string } = {};
    for (const cookie of cookiesRaw) {
        const value = JSONCookie(cookie.value);
        if (value) {
            cookies[cookie.name] = value;
        } else if (cookie.value) {
            cookies[cookie.name] = cookie.value;
        }

    }
    const extendedResponse = response as supertest.Response & { cookies: { [key: string]: object | string }, cookiesRaw: Cookie[]};
    extendedResponse.cookies = cookies;
    extendedResponse.cookiesRaw = cookiesRaw;
    return extendedResponse;
}