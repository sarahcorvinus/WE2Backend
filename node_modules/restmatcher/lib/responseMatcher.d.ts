/**
 * Expected Status type, either a number or a string, or an array of those.
 * If it is a string, jokers ('*' or '?') are allowed.
 */
export type ExpectedStatusType = number | number[] | string | string[] | undefined;
/**
 * Used in toHaveValidationErrors matcher.
 * Examples:
 *
 * - `expect(res).toHaveValidationErrors()`:
 *   succeeds if at least one validation error is found
 * - `expect(res).toHaveValidationErrors(400)`:
 *   succeeds if at least one validation error is found and status code is 400
 * - `expect(res).toHaveValidationErrors(params: "ID")`:
 *   succeeds if the parameter "ID" caused a validation error
 * - `expect(res).not.toHaveValidationErrors()`:
 *   succeeds if no validations errors were omitted
 */
export type ResponseExpectation = {
    /**
     * Array of codes, status must be one of them, or a single number, or a string
     * to indicate a range. Use "x", "?", or "*" as joker, e.g. "4xx", "4??", or "4*"
     */
    status?: ExpectedStatusType;
    /**
     * A path in location body.
     */
    body?: string | string[];
    /**
     * A path in location query.
     */
    query?: string | string[];
    /**
     * A path in location params.
     */
    params?: string | string[];
    /**
     * A path in location cookies.
     */
    cookies?: string | string[];
    /**
     * A path in location headers
     */
    headers?: string | string[];
    /**
     * Any location, i.e. body, cookies, headers, params, or query, which caused the problem.
     */
    anyLocation?: string | string[];
};
export declare const statusCode: (received: Response, expected: ExpectedStatusType) => {
    pass: boolean;
    message: () => string;
};
export declare const toHaveValidationErrorsExactly: (received: Response, expectedOrNothing?: ResponseExpectation) => {
    pass: boolean;
    message: () => string;
};
export declare const toHaveAtLeastValidationErrors: (received: Response, expectedOrNothing?: ResponseExpectation) => {
    pass: boolean;
    message: () => string;
};
export declare const toHaveNoValidationErrors: (received: Response, expected?: ExpectedStatusType) => {
    pass: boolean;
    message: () => string;
};
export declare const toHaveAnyValidationErrors: (received: Response, expected?: ExpectedStatusType) => {
    pass: boolean;
    message: () => string;
};
/**
 * Exported only for testing.
 */
export declare function normalizeExpectedStatusPattern(expectedStatusPattern: number | number[] | string | string[] | undefined): string[];
//# sourceMappingURL=responseMatcher.d.ts.map