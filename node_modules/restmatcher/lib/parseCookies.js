"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseCookies = void 0;
const cookie_parser_1 = require("cookie-parser");
const set_cookie_parser_1 = __importDefault(require("set-cookie-parser"));
/**
 * Simplifies access to cookies in SuperTest responses.
 * The cookies are parsed and added to the response object in a new property `cookies`.
 * This is a  similar to the express middleware cookieParser.
 
* Example (accessing a cookie called `access_token`):
 * ```
 * const testee = supertest(app);
 * const response = parseCookies(await testee.post(`/login`).send({ email: "john@some-host.de", password: "1234" }));
 * const jwtString = response.cookies.access_token;
 * ...
 * ```
 *
 * @param response response returned from SuperTest
 * @returns the same response with two new properties:
 *      - `cookies`: this property contains the values of cookies as properties,
*           the name of the cookie is the name of the property (similar to the express middleware cookieParser),
            e.g. `res.cookies.access_token` contains the value of the cookie `access_token`
        - `cookiesRaw`: the full cookies (as returned by set-cookies), i.e. including all properties (such as `httpOnly`, `secure`, etc.),
            this is an array of cookies.
 */
function parseCookies(response) {
    const cookiesRaw = set_cookie_parser_1.default.parse(response.res);
    const cookies = {};
    for (const cookie of cookiesRaw) {
        const value = (0, cookie_parser_1.JSONCookie)(cookie.value);
        if (value) {
            cookies[cookie.name] = value;
        }
        else if (cookie.value) {
            cookies[cookie.name] = cookie.value;
        }
    }
    const extendedResponse = response;
    extendedResponse.cookies = cookies;
    extendedResponse.cookiesRaw = cookiesRaw;
    return extendedResponse;
}
exports.parseCookies = parseCookies;
//# sourceMappingURL=parseCookies.js.map