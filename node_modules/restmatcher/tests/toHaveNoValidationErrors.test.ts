import "../src/restmatcher"

const res = {
    status: 400,
    body: {
        "errors": [
            {
                "location": "params",
                "msg": "Invalid value",
                "param": "resID",
                "value": "1234"
            }
        ]
    }
}

const resNoValidationErrors = {
    status: 201,
    body: {}
}

test("no validation error expected, status ok", ()=>{
    try {
        expect(res).toHaveNoValidationErrors(400);
    } catch (err) {
       expect(String(err)).toBe("Error: Unexpected validation errors at params.resID.\nStatus code is 400 (matching 400)")
        return
    }
    throw new Error("No error thrown, but should have been");
    
});

test("no validation error expected, status does not match", ()=>{
    try {
        expect(res).toHaveNoValidationErrors(404);
    } catch (err) {
       expect(String(err)).toBe("Error: The received status 400 does not match expected status 404.\nUnexpected validation errors at params.resID.")
        return
    }
    throw new Error("No error thrown, but should have been");
    
});


test("no validation error expected", ()=>{
    try {
        expect(res).toHaveNoValidationErrors();
    } catch (err) {
       expect(String(err)).toBe("Error: Unexpected validation errors at params.resID.")
        return
    }
    throw new Error("No error thrown, but should have been");
    
});

test("no validation error is found as expected!", ()=>{
    expect(resNoValidationErrors).toHaveNoValidationErrors();
});

test("no validation error is found as expected, status ok!", ()=>{
    expect(resNoValidationErrors).toHaveNoValidationErrors("201");
});

test("no validation error is found as expected, status code wrong!", ()=>{
    try {
        expect(resNoValidationErrors).toHaveNoValidationErrors(200);
    } catch (err) {
        expect(String(err)).toBe("Error: The received status 201 does not match expected status 200.")
        // expected
        return
    }
    
});