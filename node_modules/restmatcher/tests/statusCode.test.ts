import { normalizeExpectedStatusPattern } from "../src/responseMatcher";
import "../src/restmatcher"


test.each([
    [200, 200],
    [200, "200"],
    [200, [200]],
    [200, ["200"]],
    [200, "2*"],
    [200, "20*"],
    [200, "2??"],
    [200, "2?0"],
    [200, "20?"],
    [200, "2"],
    [200, 2],
    [200, 20],
    [200, ["404", "200"]],
    [200, undefined],
])("expect %s to match %s", (actual: number, expected: number | number[] | string | string[] | undefined) => {
    expect({ status: actual }).statusCode(expected);
});


test.each([
    [404, 200],
    [404, "??0"],
    [404, [200]],
    [404, ["200"]],
    [404, "2*"],
    [404, "20*"],
    [404, "2??"],
    [404, "2?0"],
    [404, "??0"],
    [404, "?00"],
    [404, "2?0"],
    [404, "20?"],
    [404, "2"],
    [404, 2],
    [404, 20],
    [404, ["400", "200"]]
])("expect %s not to match %s", (actual: number | undefined, expected: number | number[] | string | string[] | undefined) => {
    expect({ status: actual }).not.statusCode(expected);
});


test("invalid code does not match no code", () => {
    expect({ status: undefined }).not.statusCode();
    expect({}).not.statusCode();
});

function shouldFail(fn: () => void) {
    try {
        fn();
    } catch (err) {
        // expected
        return;
    }
    throw new Error("Should not be reached, invalid status code should throw an error");
}

test("invalid code never matches any code, even when tested with not", () => {
    shouldFail(() => expect({ status: undefined }).not.statusCode(200));
    shouldFail(() => expect({ status: undefined }).not.statusCode(200));
    shouldFail(() => expect({ status: undefined }).statusCode(200));
});

test.each([
    ["undefined", undefined, []],
    ["4->4xx", 4, ["4xx"]],
    ["401->401", 401, ["401"]],
    ["'4'->'4'", '4', ["4"]],
    ["'401'->'401'", '401', ["401"]],
    ["[2,4]->[2xx,4xx]", [2, 4], ["2xx", "4xx"]],
    ["['2','4']->[2xx,4]", ['2', '4'], ["2", "4"]]
    ])(`%s`, (_name, pattern: number | number[] | string | string[] | undefined, expected: string[]) => {
        expect(normalizeExpectedStatusPattern(pattern)).toEqual(expected);
    });