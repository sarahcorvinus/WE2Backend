import "../src/restmatcher"

const res = {
    status: 400,
    body: {
        "errors": [
            {
                "location": "params",
                "msg": "Invalid value",
                "param": "resID",
                "value": "1234"
            }
        ]
    }
}

const resNoValidationErrors = {
    status: 201,
    body: {}
}

test("any validation error is found, status code matches!", ()=>{
    try {
        expect(resNoValidationErrors).toHaveAnyValidationErrors(201);
    } catch (err) {
       expect(String(err)).toBe("Error: No validation errors found, property 'errors' not found in body.\nStatus code is 201 (matching 201)")
        return
    }
    throw new Error("No error thrown, but should have been");
    
});

test("any validation error is found!", ()=>{
    try {
        expect(resNoValidationErrors).toHaveAnyValidationErrors();
    } catch (err) {
        expect(String(err)).toBe("Error: No validation errors found, property 'errors' not found in body.")
        // expected
        return
    }
    throw new Error("No error thrown, but should have been");
    
});

test("any validation error is found!", ()=>{
    expect(res).toHaveAnyValidationErrors();
});

test("any validation error is found, status code matches!", ()=>{
    expect(res).toHaveAnyValidationErrors("4*");
});

test("any validation error is found, status code does not match!", ()=>{
    try {
        expect(res).toHaveAnyValidationErrors(404);
    } catch (err) {
        expect(String(err)).toBe("Error: The received status 400 does not match expected status 404.")
        // expected
        return
    }
    
});